#!/usr/bin/python

'''
CS 265 Assignment 4
Author: Konstantin Zelmanovich
Date: 12/11/2017
Description: This is a command-line utility that lists bank account information and transactions such as deposits and withdrawals
Platform: Python 2.7.12 on tux4.cs.drexel.edu
'''

import os
import sys
from datetime import date

# Defining classes

class Transaction:
    def __init__(self, operation, date, amount):
        self.operation = operation
        self.date = date
        self.amount = amount
        return

class Account:
    def __init__(self, account_id, name):
        self.account_id = account_id
        self.name = name
        self.balance = 0
        self.transactions = []
        return

    # function to
    def add_transaction(self, transaction):
        self.transactions.append(transaction) 
        if transaction.operation == "W" or "w":
            self.balance = self.balance - transaction.amount
        else:
            self.balance = self.balance + transaction.amount
        return

    def __repr__(self):
        return repr((self.name, self.balance, self.account_id))

    def output_for_file(self):
        output = ''

        for transaction in self.transactions:
            output = output + self.account_id + ":" + self.name + ":" + transaction.date + ":" + transaction.operation + ":" + str(transaction.amount) + "\n"
        return output


# Defining methods

def account_sort():
    sorted_account_ids = sorted(accounts, key= lambda account_id:accounts[account_id].name)
    return sorted_account_ids

def account_print():
    sorted_account_ids = account_sort()
    count = 0
    for i in sorted_account_ids:
        count += 1
        print str(count) + ')' + accounts[i].name + " " + accounts[i].account_id
    print 'q)uit\n'
    return sorted_account_ids

def account_select():
    current_account = raw_input('Enter choice => ' ).strip()
    if current_account == 'q':
        exit(0)
    return int(current_account) - 1

def account_select_for_inset():
    current_account = raw_input('Enter choice or type "n" to create a new account => ').strip()
    if current_account == 'n':
        account_create()

        return int(len(accounts.keys())) - 1
    else:
        if current_account == 'q':
            exit(0)
    return int(current_account) - 1

def account_create():

    account_id = raw_input('Enter account ID:' ).strip()

    if account_id in accounts.keys():
        print "This account ID cannot be used twice"
        exit(1)

    name = raw_input('Enter account name:').strip()
    accounts[account_id] = Account(account_id, name)
    sorted_account_ids.append(account_id)
    return

def date_form():
    t = date.today().timetuple()
    year = str(t[0])[2:]
    month = ''

    if len(str(t[1])) == 1:
        month = '0' + str(t[1])
    else:
         month = str(t[1])
    day = ''

    if len(str(t[2])) == 1:
        day = '0' + str(t[2])
    else:
        day = str(t[2])

    return year + "." + month + "." + day
    
def insert_operation():
    operation = raw_input("Enter the Operation (w - withdrawal ; d - deposit): ").strip()
    amount = float(raw_input("Enter the amount: "))
    accounts[sorted_account_ids[current_account]].add_transaction(Transaction(operation.capitalize(), date_form(), amount))
    
def account_details():
    print '\n\t account #: ' + accounts[sorted_account_ids[current_account]].account_id
    print '\t name: ' + accounts[sorted_account_ids[current_account]].name
    print '\t balance: ' + str(accounts[sorted_account_ids[current_account]].balance) + '\n'
    raw_input("Press Enter to go back")
    return

def account_history():
    for transaction in accounts[sorted_account_ids[current_account]].transactions:
        if transaction.operation == "W":
            print transaction.date + " withdrawal in the amount of " + str(transaction.amount)
        else:
            print transaction.date + " deposit in the amount of " + str(transaction.amount)
    return

def usage():
    print "-i Account info"
    print "-h History"
    print "-t Insert transaction"
    print "-? Show usage msg and quit"

def save_to_file():
    data = ''
    for account in accounts:
        data = data + accounts[account].output_for_file()
    with open('tmp','w') as f:
        f.write(data)
    os.rename('tmp',path)
    return

# Defining global variables
accounts = {}
sorted_account_ids = []
current_account = None
insert_new_account = False
path = os.environ.get('ACCT_LIST')


if path == None:
    path = "sample.log"

with open("test.txt", 'r') as f1:
    for line in f1:
        form_line = line.strip();
        line_info = form_line.split(':')
        transaction = Transaction(line_info[3], line_info[2], float(line_info[4]))
        if line_info[0] not in accounts.keys():
            accounts[line_info[0]] = Account(line_info[0], line_info[1])
        accounts[line_info[0]].add_transaction(transaction)


# checking the validity of arguments
if(len(sys.argv) > 1):
    if sys.argv[1].strip() == "-?":
        usage();
        exit(0)

    while 1:
        if sys.argv[1].strip() == "-i":
            sorted_account_ids = account_print()
            current_account = account_select()
            account_details()
        if sys.argv[1].strip() == "-h":
            sorted_account_ids = account_print()
            current_account = account_select()
            account_history()
        if sys.argv[1].strip() == "-t":
            sorted_account_ids = account_print()
            current_account = account_select_for_inset()
            insert_operation()
        save_to_file()

else:
    usage()
